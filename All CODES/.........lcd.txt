//LCD CUSTON FULL
#include <LiquidCrystal.h>
int d7=2,d6=3,d5=4,d4=5,en=6,rs=7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
int x=0,y=0,n=1;
byte D0[8] = {
  B11000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000
};
byte D1[8] = {
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00011
};
byte D2[8] = {
  B00011,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000
};
byte D3[8] = {
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B00000,
  B11000
};
byte D4[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D5[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D6[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D7[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D8[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D9[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D10[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D11[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D12[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D13[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D14[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D15[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D16[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D17[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D18[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D19[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D20[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D21[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D22[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D23[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D24[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D25[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D26[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D27[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D28[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D29[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D30[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D31[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D32[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D33[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D34[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D35[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D36[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D37[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D38[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D39[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D40[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D41[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D42[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D43[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D44[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D45[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D46[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D47[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D48[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D49[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D50[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D51[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D52[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D53[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D54[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D55[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D56[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D57[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D58[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D59[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D60[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D61[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D62[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D63[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D64[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D65[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D66[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D67[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D68[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D69[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D70[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D71[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D72[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D73[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D74[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D75[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D76[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D77[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D78[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
byte D79[8] = {
  0b00001,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};
void setup() {
  lcd.begin(20,4);
  lcd.createChar(n,D0);
  ++n;
  lcd.createChar(n,D1);
  ++n;
  lcd.createChar(n,D2);
  ++n;
  lcd.createChar(n,D3);
  ++n;
  lcd.createChar(n,D4);
  ++n;
  lcd.createChar(n,D5);
  ++n;
  lcd.createChar(n,D6);
  ++n;
  lcd.createChar(n,D7);
  ++n;
  lcd.createChar(n,D8);
  ++n;
  lcd.createChar(n,D9);
  ++n;
  lcd.createChar(n,D10);
  ++n;
  lcd.createChar(n,D11);
  ++n;
  lcd.createChar(n,D12);
  ++n;
  lcd.createChar(n,D13);
  ++n;
  lcd.createChar(n,D14);
  ++n;
  lcd.createChar(n,D15);
  ++n;
  lcd.createChar(n,D16);
  ++n;
  lcd.createChar(n,D17);
  ++n;
  lcd.createChar(n,D18);
  ++n;
  lcd.createChar(n,D19);
  ++n; 
  lcd.createChar(n,D20);
  ++n;
  lcd.createChar(n,D21);
  ++n;
  lcd.createChar(n,D22);
  ++n;
  lcd.createChar(n,D23);
  ++n;
  lcd.createChar(n,D24);
  ++n;
  lcd.createChar(n,D25);
  ++n;
  lcd.createChar(n,D26);
  ++n;
  lcd.createChar(n,D27);
  ++n;
  lcd.createChar(n,D28);
  ++n;
  lcd.createChar(n,D29);
  ++n;
  lcd.createChar(n,D30);
  ++n;
  lcd.createChar(n,D31);
  ++n;
  lcd.createChar(n,D32);
  ++n;
  lcd.createChar(n,D33);
  ++n;
  lcd.createChar(n,D34);
  ++n;
  lcd.createChar(n,D35);
  ++n;
  lcd.createChar(n,D36);
  ++n;
  lcd.createChar(n,D37);
  ++n;
  lcd.createChar(n,D38);
  ++n;
  lcd.createChar(n,D39); 
  ++n;
  lcd.createChar(n,D40);
  ++n;
  lcd.createChar(n,D41);
  ++n;
  lcd.createChar(n,D42);
  ++n;
  lcd.createChar(n,D43);
  ++n;
  lcd.createChar(n,D44);
  ++n;
  lcd.createChar(n,D45);
  ++n;
  lcd.createChar(n,D46);
  ++n;
  lcd.createChar(n,D47);
  ++n;
  lcd.createChar(n,D48);
  ++n;
  lcd.createChar(n,D49);
  ++n;
  lcd.createChar(n,D50);
  ++n;
  lcd.createChar(n,D51);
  ++n;
  lcd.createChar(n,D52);
  ++n;
  lcd.createChar(n,D53);
  ++n;
  lcd.createChar(n,D54);
  ++n;
  lcd.createChar(n,D55);
  ++n;
  lcd.createChar(n,D56);
  ++n;
  lcd.createChar(n,D57);
  ++n;
  lcd.createChar(n,D58);
  ++n;
  lcd.createChar(n,D59); 
  ++n;    
  lcd.createChar(n,D60);
  ++n;
  lcd.createChar(n,D61);
  ++n;
  lcd.createChar(n,D62);
  ++n;
  lcd.createChar(n,D63);
  ++n;
  lcd.createChar(n,D64);
  ++n;
  lcd.createChar(n,D65);
  ++n;
  lcd.createChar(n,D66);
  ++n;
  lcd.createChar(n,D67);
  ++n;
  lcd.createChar(n,D68);
  ++n;
  lcd.createChar(n,D69);
  ++n;
  lcd.createChar(n,D70);
  ++n;
  lcd.createChar(n,D71);
  ++n;
  lcd.createChar(n,D72);
  ++n;
  lcd.createChar(n,D73);
  ++n;
  lcd.createChar(n,D74);
  ++n;
  lcd.createChar(n,D75);
  ++n;
  lcd.createChar(n,D76);
  ++n;
  lcd.createChar(n,D77);
  ++n;
  lcd.createChar(n,D78);
  ++n;
  lcd.createChar(n,D79);
  n=1;
}
void loop() {
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;} 
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));
  ++n;++x;if(x==20){++y;}
  lcd.setCursor(x,y);
  lcd.write(byte(n));                  
  x=0,y=0,n=1;
  }